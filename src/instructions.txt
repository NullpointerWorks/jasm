      _    _    _________  __    ___  
     | |  / \  / _____   \/  |  ( _ ) 
  _  | | / _ \ \___ \ | |\/| |  / _ \ 
 | |_| // ___ \____) || |  | | | (_) |
  \___//_/   \______/ |_|  |_|  \___/ 

       Java 8-bit virtual machine

 ________________________________________________
|                                                |
|      Compiler instructions                     |
|________________________________________________|
include external *.jasm file

.inc "[name].jasm"


_________________________________________________
define a name for a constant value

.equ [name] [value]


_________________________________________________
define a label name to jump to

[name]:


 ________________________________________________
|                                                |
|      Assembler code                            |
|________________________________________________|
no-operation 

syntax:
	nop	

byte:
	NOP

_________________________________________________
halt program 

syntax:
	end

byte:
	END

_________________________________________________
output to monitor 

syntax:
	out [reg8]
	out [reg16]
	out [imm8]
	out [imm16]

byte:
	OUT, R
	OUT, I, (byte)
	OUT, IL, (byte), (byte)

_________________________________________________
load register

syntax:
	load [reg8] ,[reg8]
	load [reg16],[reg8]
	load [reg16],[reg16]
	
	load [reg8] ,[imm8]
	load [reg16],[imm8]
	load [reg16],[imm16]

byte:
	LOAD, RR
	LOAD, RI, (byte)

_________________________________________________
jump 

syntax:
	jmp [label]

byte:
	JMP, (byte), (byte)

_________________________________________________
jump if equal, or jump if zero

syntax:
	je [label]
	jz [label]

byte:
	JE, (byte), (byte)

_________________________________________________
jump if not equal, or jump if not zero

syntax:
	jne [label]	
	jnz [label]	

byte:
	JNE, (byte), (byte)

_________________________________________________
jump if greater 

syntax:
	jg [label]

byte:
	JG, (byte), (byte)

_________________________________________________
jump if greater or equal 

syntax:
	jge [label]

byte:
	JGE, (byte), (byte)

_________________________________________________
jump if less 

syntax:
	jl [label]

byte:
	JL, (byte), (byte)

_________________________________________________
jump if less or equal 

syntax:
	jle [label]

byte:
	JLE, (byte), (byte)

_________________________________________________
call label 

syntax:
	call [label]

byte:
	CALL, (byte), (byte)

_________________________________________________
return to previous call 

syntax:
	ret	

byte:
	RET

_________________________________________________
bit-shift left

syntax:
	shl [reg8]
	shl [reg16]

byte:
	SHL R

_________________________________________________
bit-shift right

syntax:
	shr [reg8]
	shr [reg16]

byte:
	SHR R

_________________________________________________
addition

syntax:
	add [reg8],[reg8]
	add [reg16],[reg8]
	add [reg16],[reg16]
	
	add [reg8],[imm8]
	add [reg16],[imm8]
	add [reg16],[imm16]

byte:
	ADD, RR
	ADD, RI, (byte)
	ADD, RIL, (byte), (byte)


_________________________________________________
subtraction 

syntax:
	sub [reg8],[reg8]
	sub [reg16],[reg8]
	sub [reg16],[reg16]
	
	sub [reg8],[imm8]
	sub [reg16],[imm8]
	sub [reg16],[imm16]

byte:
	SUB, RR
	SUB, RI, (byte)
	SUB, RIL, (byte), (byte)

_________________________________________________
compare 

syntax:
	cmp [reg8],[reg8]
	cmp [reg16],[reg8]
	cmp [reg16],[reg16]
	
	cmp [reg8],[imm8]
	cmp [reg16],[imm8]
	cmp [reg16],[imm16]

byte:
	CMP, RR
	CMP, RI, (byte)
	CMP, RIL, (byte), (byte)

_________________________________________________
negation 

syntax:
	neg [reg8]
	neg [reg16]

byte:
	NEG, R

_________________________________________________
increment register 

syntax:
	inc [reg8]
	inc [reg16]

byte:
	INC, R

_________________________________________________
decrement register 

syntax:
	dec [reg8]
	dec [reg16]

byte:
	DEC, R

_________________________________________________
storage 

syntax:
	sto &[imm16],[reg8]
	sto &[imm16],[imm8]
	sto [reg16],[reg8]
	sto [reg16],[imm8]
	
byte:
	STO, RR
	STO, RI, (byte)
	STO, R, (byte), (byte)
	STO, I, (byte), (byte), (byte)
	
_________________________________________________
read ram

syntax:
	rd [reg8], [reg16]
	rd [reg8], &[imm16]
	
byte:
	MRD, RR
	MRD, R, (byte), (byte)
	
_________________________________________________
pop from stack 

syntax:
	pop [reg8]
	pop [reg16]

byte:
	POP, R

_________________________________________________
push to stack 

syntax:
	push [reg8]
	push [reg16]
	push [imm8]
	push [imm16]

byte:
	PUSH, R
	PUSH, I, (byte)
	PUSH, IL, (byte), (byte)

_________________________________________________
get register bit value

syntax:
	bit [reg8],[imm8]
	bit [reg16],[imm8]

byte:
	BIT, R, (byte)
	