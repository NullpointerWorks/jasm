      _    _    _________  __    ___  
     | |  / \  / _____   \/  |  ( _ ) 
  _  | | / _ \ \___ \ | |\/| |  / _ \ 
 | |_| // ___ \____) || |  | | | (_) |
  \___//_/   \______/ |_|  |_|  \___/ 

JASM 8-bit virtual machine instructions and memory byte size

========================================
no-operation 

syntax:
	nop	

byte:
	NOP

========================================
output to monitor 

syntax:
	out [reg8]
	out [reg16]
	out [imm8]

byte:
	OUT, Rx
	OUT, I, (byte)

========================================
load register

syntax:
	load [reg8],[reg8]
	load [reg8],[imm8]
	load [reg8],&[addr16]

byte:
	LOAD, Rxx
	LOAD, RxI, (byte)
	LOAD, RxM, (byte), (byte)

load [reg16],[imm8]
load [reg16],[imm16]

========================================
addition

syntax:
	add [reg8],[reg8]
	add [reg8],[imm8]

byte:
	ADD, Rxx
	ADD, RxI, (byte)

========================================
subtraction 

syntax:
	sub [reg8],[reg8]
	sub [reg8],[imm8]

byte:
	SUB, Rxx
	SUB, RxI, (byte)

========================================
compare 

syntax:
	cmp [reg8],[reg8]
	cmp [reg8],[imm8]

byte:
	CMP, Rxx
	CMP, RxI, (byte)

========================================
jump 

syntax:
	jmp [label]

byte:
	JMP, (byte), (byte)

========================================
negation 

syntax:
	neg [reg8]

byte:
	NEG, Rx

========================================
storage 

syntax:
	sto &[addr16],[reg8]
	sto &[addr16],[imm8]
	
byte:
	STO, Rx, (byte), (byte)
	STO, I, (byte), (byte), (byte)

========================================
push to stack 

syntax:
	push [reg8]
	push [reg16]
	push [imm8]
	push &[addr16]

byte:
	PUSH, Rx
	PUSH, I, (byte)
	PUSH, M, (byte), (byte)

========================================
pop from stack 

syntax:
	pop [reg8]
	pop [reg16]

byte:
	POP, Rx

========================================
call label 

syntax:
	call [label]

byte:
	CALL, (byte), (byte)

========================================
return to previous call 

syntax:
	ret	

byte:
	RET

========================================
jump if equal 

syntax:
	je [label]

byte:
	JE, (byte), (byte)

========================================
jump if not equal 

syntax:
	jne [label]	

byte:
	JNE, (byte), (byte)

========================================
jump if greater 

syntax:
	jg [label]

byte:
	JG, (byte), (byte)

========================================
jump if greater or equal 

syntax:
	jge [label]

byte:
	JGE, (byte), (byte)

========================================
jump if less 

syntax:
	jl [label]

byte:
	JL, (byte), (byte)

========================================
jump if less or equal 

syntax:
	jle [label]

byte:
	JLE, (byte), (byte)

========================================
increment register 

syntax:
	inc [reg8]

byte:
	INC, Rx,

========================================
decrement register 

syntax:
	dec [reg8]

byte:
	DEC, Rx

========================================
halt program 

syntax:
	end

byte:
	END
