          _    _    ________  __ 
         | |  / \  / ____   \/  |
      _  | | / _ \ \___ \| |\/| |
     | |_| // ___ \____) | |  | |
      \___//_/   \______/|_|  |_|
	
    Java Assembler Virtual Machine
    JASM Version 1.0.0
	
	
	
A style highlighting is available for Notepad++ 
called "npp_jasm_style.xml".

 ________________________________________________
|                                                |
|          Pre-processor instructions            |
|________________________________________________|
include external *.jasm file

.inc "[name].jasm"

_________________________________________________
define a name for a constant value

.def [name] [value]

_________________________________________________
define a label name to jump to

[name]:

 ________________________________________________
|                                                |
|                Assembler code                  |
|________________________________________________|

		SYSTEM INSTRUCTIONS
_________________________________________________
no-operation 

syntax:		nop	
bytecode:	0x00

_________________________________________________
interrupt program

syntax:		int <imm>
bytecode:	0x0? [0x00,]
? = number of following bytes

_________________________________________________

		ARITHMETIC INSTRUCTIONS
_________________________________________________
addition

syntax:		add <reg>, <reg>
bytecode:	0x10 0x01 0x02
	
syntax:		add <reg>, <imm>
bytecode:	0x1? 0x01 [0x00,]
? = number of following bytes

_________________________________________________
subtraction 

syntax:		sub <reg>, <reg>
bytecode:	0x20 0x01 0x02

syntax:		sub <reg>, <imm>
bytecode:	0x2? 0x01 [0x00,]
? = number of following bytes

_________________________________________________
compare 

syntax:		cmp <reg>, <reg>
bytecode:	

syntax:		cmp <reg>, <imm>	
bytecode:	

_________________________________________________
bit-shift left

syntax:
	shl <reg>
	
bytecode:

_________________________________________________
bit-shift right

syntax:
	shr <reg>
	
bytecode:

_________________________________________________
negation 

syntax:
	neg <reg>
	
bytecode:

_________________________________________________
increment register 

syntax:
	inc <reg>
	
bytecode:

_________________________________________________
decrement register 

syntax:
	dec <reg>
	
bytecode:

_________________________________________________

		JUMP INSTRUCTIONS
_________________________________________________
unconditional jump 

syntax:
	jmp <label>
	
bytecode:

_________________________________________________
jump if equal, or jump if zero

syntax:
	je <label>
	
bytecode:

_________________________________________________
jump if not equal, or jump if not zero

syntax:
	jne <label>
	
bytecode:

_________________________________________________
jump if greater 

syntax:
	jg <label>
	
bytecode:

_________________________________________________
jump if greater or equal 

syntax:
	jge <label>
	
bytecode:

_________________________________________________
jump if less 

syntax:
	jl <label>
	
bytecode:

_________________________________________________
jump if less or equal 

syntax:
	jle <label>
	
bytecode:

_________________________________________________
call label 

syntax:
	call <label>
	
bytecode:

_________________________________________________
return to previous call 

syntax:
	ret	
	
bytecode:

_________________________________________________

		DATA TRANSFER INSTRUCTIONS
_________________________________________________
load register

syntax:
	load <reg>, <reg>
	load <reg>, <imm>
	
bytecode:

_________________________________________________
push to stack

syntax:
	push <reg>
	push <imm>
	
bytecode:

_________________________________________________
pop from stack 

syntax:
	pop <reg>
	
bytecode:

_________________________________________________
store to ram

syntax:
	sto @<reg>,<reg>
	sto @<imm>,<reg>
	
bytecode:
	
_________________________________________________
read ram

syntax:
	read <reg>, @<reg>
	read <reg>, @<imm>
	
bytecode:
	
