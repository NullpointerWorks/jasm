          _    _    ________  __ 
         | |  / \  / ____   \/  |
      _  | | / _ \ \___ \| |\/| |
     | |_| // ___ \____) | |  | |
      \___//_/   \______/|_|  |_|
	
    Java Assembler Virtual Machine
    JASM Version 1.0.0
	
	
	
A style highlighting is available for Notepad++ 
called "npp_jasm_style.xml".
	
The VM has 15 registers to select from
A = first register
B = second register
	
 ________________________________________________
|                                                |
|          Pre-processor instructions            |
|________________________________________________|
include external *.jasm file

.inc "[name].jasm"

_________________________________________________
define a name for a constant value

.def [name] [value]

_________________________________________________
define a label name to jump to

[name]:

 ________________________________________________
|                                                |
|                Assembler code                  |
|________________________________________________|

		SYSTEM INSTRUCTIONS
_________________________________________________
no-operation 

syntax:		nop	
bytecode:	0x00

_________________________________________________
interrupt program

syntax:		int <imm>
bytecode:	0x01 [0x00 0x00 0x00 0x00]

_________________________________________________

		ARITHMETIC INSTRUCTIONS
_________________________________________________
addition

syntax:		add <reg>, <reg>
bytecode:	0x10 0xAB
	
syntax:		add <reg>, <imm>
bytecode:	0x11 0x0A [0x00 0x00 0x00 0x00]

_________________________________________________
subtraction 

syntax:		sub <reg>, <reg>
bytecode:	0x12 0xAB

syntax:		sub <reg>, <imm>
bytecode:	0x13 0x0A [0x00 0x00 0x00 0x00]

_________________________________________________
compare 

syntax:		cmp <reg>, <reg>
bytecode:	0x14 0xAB

syntax:		cmp <reg>, <imm>	
bytecode:	0x15 0x0A [0x00 0x00 0x00 0x00]

_________________________________________________
bit-shift left

syntax:		shl <reg>
bytecode:	0x20 0x0A

_________________________________________________
bit-shift right

syntax:		shr <reg>
bytecode:	0x21 0x0A

_________________________________________________
negation 

syntax:		neg <reg>
bytecode:	0x22 0x0A

_________________________________________________
increment register 

syntax:		inc <reg>
bytecode:	0x23 0x0A

_________________________________________________
decrement register 

syntax:		dec <reg>
bytecode:	0x24 0x0A

_________________________________________________

		JUMP INSTRUCTIONS
_________________________________________________
unconditional jump 

syntax:		jmp <label>
bytecode:	0x30 [0x00 0x00 0x00 0x00]

_________________________________________________
jump if equal, or jump if zero

syntax:		je <label>
bytecode:	0x31 [0x00 0x00 0x00 0x00]

_________________________________________________
jump if not equal, or jump if not zero

syntax:		jne <label>
bytecode:	0x32 [0x00 0x00 0x00 0x00]

_________________________________________________
jump if greater 

syntax:		jg <label>
bytecode:	0x33 [0x00 0x00 0x00 0x00]

_________________________________________________
jump if greater or equal 

syntax:		jge <label>
bytecode:	0x34 [0x00 0x00 0x00 0x00]

_________________________________________________
jump if less 

syntax:		jl <label>
bytecode:	0x35 [0x00 0x00 0x00 0x00]

_________________________________________________
jump if less or equal 

syntax:		jle <label>
bytecode:	0x36 [0x00 0x00 0x00 0x00]

_________________________________________________
call label 

syntax:		call <label>
bytecode:	0x37 [0x00 0x00 0x00 0x00]

_________________________________________________
return to previous call 

syntax:		ret	
bytecode:	0x38

_________________________________________________

		DATA TRANSFER INSTRUCTIONS
_________________________________________________
load register

syntax:		load <reg>, <reg>
bytecode:	0x40 0xAB

syntax:		load <reg>, <imm>
bytecode:	0x41 0x0A [0x00 0x00 0x00 0x00]

_________________________________________________
push to stack

syntax:		push <reg>
bytecode:	0x42 0x0A

syntax:		push <imm>
bytecode:	0x43 [0x00 0x00 0x00 0x00]

_________________________________________________
pop from stack 

syntax:		pop <reg>
bytecode:	0x44 0x0A

_________________________________________________
store to ram

syntax:		sto @<reg>,<reg>
bytecode:	0x45 0xAB

syntax:		sto @<imm>,<reg>
bytecode:	0x46 0x0A [0x00 0x00 0x00 0x00]
	
_________________________________________________
read ram

syntax:		read <reg>, @<reg>
bytecode:	0x47 0xAB

syntax:		read <reg>, @<imm>
bytecode:	0x48 0x0A [0x00 0x00 0x00 0x00]
	
_________________________________________________

		LOGIC INSTRUCTIONS
_________________________________________________
logical AND

syntax:		and <reg>, <imm>
bytecode:	0x50 0x0A [0x00 0x00 0x00 0x00]

_________________________________________________
logical OR

syntax:		or <reg>, <imm>
bytecode:	0x51 0x0A [0x00 0x00 0x00 0x00]

_________________________________________________
logical XOR

syntax:		xor <reg>, <imm>
bytecode:	0x52 0x0A [0x00 0x00 0x00 0x00]



